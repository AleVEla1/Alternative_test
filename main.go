package main

import (
	"fmt"     // Импортируем пакет для работы с вводом и выводом
	"os"      // Импортируем пакет для работы с аргументами командной строки
	"regexp"  // Импортируем пакет для работы с регулярными выражениями
	"strconv" // Импортируем пакет для преобразования строк в числа
	"strings" // Импортируем пакет для работы со строками
)

func main() {
	// Проверяем, передано ли выражение в аргументах командной строки
	if len(os.Args) < 2 {
		panic("Необходимо передать выражение в виде строки.") // Если нет аргументов, вызываем панику
	}

	// Считываем выражение из аргумента командной строки
	expression := os.Args[1]
	// Вычисляем результат выражения
	result := calculate(expression)
	// Выводим результат на экран
	fmt.Println(result)
}

// Функция для вычисления результата выражения
func calculate(expression string) string {
	// Регулярное выражение для разбора входного выражения
	re := regexp.MustCompile(`^"([^"]+)"\s*([+\-*\/])\s*(?:"([^"]+)"|(\d+))$`)
	matches := re.FindStringSubmatch(expression) // Находим совпадения с регулярным выражением

	// Если регулярное выражение не нашло совпадений, вызываем панику
	if matches == nil {
		panic("Некорректное выражение. Ожидается формат: \"строка1\" оператор \"строка2\" или \"строка\" оператор число.")
	}

	// Извлекаем первую строку, оператор и вторую строку или число
	str1 := matches[1]     // первая строка (например, "Hello")
	operator := matches[2] // оператор (например, +, -, *, /)
	var str2 string        // вторая строка (если есть)
	var num int            // число (если есть)
	var err error

	// Проверяем, является ли вторым элементом строка или число
	if matches[3] != "" { // Если это строка
		str2 = matches[3] // сохраняем её в str2
	} else if matches[4] != "" { // Если это число
		num, err = strconv.Atoi(matches[4])    // пытаемся преобразовать строку в число
		if err != nil || num < 1 || num > 10 { // Проверяем, что число корректно
			panic("Число должно быть от 1 до 10.") // Если нет, вызываем панику
		}
	}

	// Выполняем соответствующую операцию в зависимости от оператора
	switch operator {
	case "+":
		return concatenate(str1, str2) // Сложение строк
	case "-":
		return subtract(str1, str2) // Вычитание строки из строки
	case "*":
		return multiply(str1, num) // Умножение строки на число
	case "/":
		return divide(str1, num) // Деление строки на число
	default:
		panic("Некорректный оператор.") // Если оператор не распознан, вызываем панику
	}
}

// Функция для сложения двух строк
func concatenate(a, b string) string {
	result := a + b         // Объединяем две строки a и b
	return truncate(result) // Укорачиваем результат при необходимости и возвращаем его
}

// Функция для вычитания одной строки из другой
func subtract(a, b string) string {
	result := strings.ReplaceAll(a, b, "") // Удаляем подстроку b из строки a
	if result == "" {
		return "" // Если результат пустой, возвращаем пустую строку
	}
	return truncate(result) // Укорачиваем результат при необходимости и возвращаем его
}

// Функция для умножения строки на число (повторение строки)
func multiply(a string, n int) string {
	if n < 1 || n > 10 {
		panic("Число должно быть от 1 до 10.") // Проверка диапазона числа
	}
	result := strings.Repeat(a, n) // Повторяем строку a n раз
	return truncate(result)        // Укорачиваем результат при необходимости и возвращаем его
}

// Функция для деления строки на число (сокращение длины строки)
func divide(a string, n int) string {
	if n < 1 || n > len(a) {
		panic("Невозможно разделить строку на это число.") // Проверка корректности деления
	}
	result := a[:len(a)/n]  // Берем часть строки a в зависимости от числа n
	return truncate(result) // Укорачиваем результат при необходимости и возвращаем его
}

// Функция для укорачивания строки до 40 символов с добавлением многоточия при необходимости
func truncate(s string) string {
	if len(s) > 40 {
		return s[:40] + "..." // Если длина больше 40 символов, добавляем многоточие
	}
	return s // Возвращаем исходную строку, если она короче или равна 40 символам
}
